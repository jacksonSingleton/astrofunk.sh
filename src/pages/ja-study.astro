---
export const prerender = false;

import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import KanjiGrid from "../components/KanjiGrid.astro";
import "../styles/ja-study.css";

// Calculate tutoring hours
const START_DATE = new Date("2025-10-20");
const START_HOURS = 67;
const TUTORING_DAYS = [1, 3, 5];

function calculateTutoringHours() {
    const today = new Date();
    today.setHours(0, 0, 0, 0);

    let currentDate = new Date(START_DATE);
    currentDate.setHours(0, 0, 0, 0);

    let additionalHours = 0;

    while (currentDate <= today) {
        const dayOfWeek = currentDate.getDay();
        if (TUTORING_DAYS.includes(dayOfWeek)) {
            additionalHours++;
        }
        currentDate.setDate(currentDate.getDate() + 1);
    }

    return START_HOURS + additionalHours;
}

const totalHours = calculateTutoringHours();

let ankiCount = 0;
try {
    const response = await fetch("https://anki-counter.fly.dev/count");
    if (response.ok) {
        const data = await response.json();
        ankiCount = data.count || 0;
    }
} catch (error) {
    console.error("Failed to fetch Anki count:", error);
}

// Fetch AniList data
const ANILIST_USERNAME = "astrofunk"; // Replace with your AniList username

async function fetchAniListMedia(type: "ANIME" | "MANGA") {
    const query = `
    query ($userName: String, $type: MediaType, $status: MediaListStatus) {
      MediaListCollection(userName: $userName, type: $type, status: $status) {
        lists {
          entries {
            media {
              id
              title {
                romaji
                english
              }
              coverImage {
                large
              }
              siteUrl
            }
            progress
          }
        }
      }
    }
  `;

    try {
        const response = await fetch("https://graphql.anilist.co", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                query,
                variables: {
                    userName: ANILIST_USERNAME,
                    type: type,
                    status: "CURRENT",
                },
            }),
        });

        if (response.ok) {
            const data = await response.json();
            const entries =
                data.data?.MediaListCollection?.lists?.[0]?.entries || [];
            return entries.map((entry: any) => ({
                id: entry.media.id,
                title: entry.media.title.english || entry.media.title.romaji,
                coverImage: entry.media.coverImage.large,
                siteUrl: entry.media.siteUrl,
                progress: entry.progress,
            }));
        }
    } catch (error) {
        console.error(`Failed to fetch AniList ${type}:`, error);
    }
    return [];
}

const currentlyWatching = await fetchAniListMedia("ANIME");
const currentlyReading = await fetchAniListMedia("MANGA");

// Fetch IGDB games list
async function fetchIGDBGames() {
    try {
        // Read the CSV file from the filesystem during build
        const fs = await import('node:fs/promises');
        const path = await import('node:path');
        const csvPath = path.join(process.cwd(), 'public', 'data', 'playing.csv');
        const csvText = await fs.readFile(csvPath, 'utf-8');
        const lines = csvText.trim().split('\n');
        
        // Skip header line and filter out empty lines
        const gameData = lines.slice(1).filter(line => line.trim()).map(line => {
            // Parse CSV line (handling quoted fields with commas)
            const fields = [];
            let current = '';
            let inQuotes = false;
            
            for (let i = 0; i < line.length; i++) {
                const char = line[i];
                if (char === '"') {
                    inQuotes = !inQuotes;
                } else if (char === ',' && !inQuotes) {
                    fields.push(current);
                    current = '';
                } else {
                    current += char;
                }
            }
            fields.push(current);
            
            const [id, game, url] = fields;
            
            return {
                id,
                title: game,
                url: url || '',
            };
        });
        
        // Get IGDB access token
        const clientId = import.meta.env.IGDB_CLIENT_ID;
        const clientSecret = import.meta.env.IGDB_CLIENT_SECRET;
        
        if (!clientId || !clientSecret) {
            console.error("IGDB credentials not found");
            return gameData.map(game => ({
                ...game,
                coverImage: `https://placehold.co/264x352/1a1a2e/ffffff?text=${encodeURIComponent(game.title || 'Game')}`,
            }));
        }
        
        // Get OAuth token
        const tokenResponse = await fetch(
            `https://id.twitch.tv/oauth2/token?client_id=${clientId}&client_secret=${clientSecret}&grant_type=client_credentials`,
            { method: 'POST' }
        );
        
        if (!tokenResponse.ok) {
            throw new Error('Failed to get IGDB access token');
        }
        
        const { access_token } = await tokenResponse.json();
        
        // Fetch cover images from IGDB API
        const games = await Promise.all(gameData.map(async (game) => {
            let coverImage = `https://placehold.co/264x352/1a1a2e/ffffff?text=${encodeURIComponent(game.title || 'Game')}`;
            
            try {
                // Query IGDB API for game details
                const response = await fetch('https://api.igdb.com/v4/games', {
                    method: 'POST',
                    headers: {
                        'Client-ID': clientId,
                        'Authorization': `Bearer ${access_token}`,
                        'Content-Type': 'text/plain',
                    },
                    body: `fields cover.image_id; where id = ${game.id};`,
                });
                
                if (response.ok) {
                    const data = await response.json();
                    if (data[0]?.cover?.image_id) {
                        const imageId = data[0].cover.image_id;
                        coverImage = `https://images.igdb.com/igdb/image/upload/t_cover_big/${imageId}.webp`;
                    }
                }
            } catch (error) {
                console.error(`Failed to fetch cover for ${game.title}:`, error);
            }
            
            return {
                ...game,
                coverImage,
            };
        }));
        
        return games;
    } catch (error) {
        console.error("Failed to fetch IGDB games:", error);
    }
    return [];
}

const currentlyPlaying = await fetchIGDBGames();
---

<html lang="en">
    <head>
        <BaseHead
            title={"Japanese Progress"}
            description={"My progress of studying japanese"}
        />
        <Header />

        <script
            async
            src="https://www.googletagmanager.com/gtag/js?id=G-QJPVFD5YTY"
        ></script><script is:inline>
            window.dataLayer = window.dataLayer || [];
            function gtag() {
                dataLayer.push(arguments);
            }
            gtag("js", new Date());

            gtag("config", "G-QJPVFD5YTY");
        </script></head
    >

    <!-- Google tag (gtag.js) -->

    <body>
        <main>
            <div class="tutoring-section">
                <h1>Japanese Study Progress</h1>
                <div class="stats-container">
                    <div class="tutoring-card">
                        <div class="tutoring-hours">
                            {totalHours}
                        </div>
                        <div class="tutoring-label">Total Tutoring Hours</div>
                    </div>
                    <div class="tutoring-card">
                        <div class="tutoring-hours">
                            {ankiCount.toLocaleString()}
                        </div>
                        <div class="tutoring-label">Flashcards Reviewed</div>
                    </div>
                </div>
            </div>

            {
                (currentlyWatching.length > 0 ||
                    currentlyReading.length > 0 ||
                    currentlyPlaying.length > 0) && (
                    <div class="anilist-section">
                        {currentlyWatching.length > 0 && (
                            <div class="media-category">
                                <h2>Currently Watching</h2>
                                <div class="media-grid">
                                    {currentlyWatching.map((anime) => (
                                        <a
                                            href={anime.siteUrl}
                                            target="_blank"
                                            rel="noopener noreferrer"
                                            class="media-card"
                                        >
                                            <img
                                                src={anime.coverImage}
                                                alt={anime.title}
                                                loading="lazy"
                                            />
                                            <div class="media-title">
                                                {anime.title}
                                            </div>
                                        </a>
                                    ))}
                                </div>
                            </div>
                        )}

                        {currentlyReading.length > 0 && (
                            <div class="media-category">
                                <h2>Currently Reading</h2>
                                <div class="media-grid">
                                    {currentlyReading.map((manga) => (
                                        <a
                                            href={manga.siteUrl}
                                            target="_blank"
                                            rel="noopener noreferrer"
                                            class="media-card"
                                        >
                                            <img
                                                src={manga.coverImage}
                                                alt={manga.title}
                                                loading="lazy"
                                            />
                                            <div class="media-title">
                                                {manga.title}
                                            </div>
                                        </a>
                                    ))}
                                </div>
                            </div>
                        )}

                        {currentlyPlaying.length > 0 && (
                            <div class="media-category">
                                <h2>Currently Playing</h2>
                                <div class="media-grid">
                                    {currentlyPlaying.map((game) => (
                                        <a
                                            href={game.url}
                                            target="_blank"
                                            rel="noopener noreferrer"
                                            class="media-card"
                                        >
                                            <img
                                                src={game.coverImage}
                                                alt={game.title}
                                                loading="lazy"
                                            />
                                            <div class="media-title">
                                                {game.title}
                                            </div>
                                        </a>
                                    ))}
                                </div>
                            </div>
                        )}
                    </div>
                )
            }

            <KanjiGrid />
        </main>
        <Footer />
    </body>
</html>
