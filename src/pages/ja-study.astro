---
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import KanjiGrid from "../components/KanjiGrid.astro";
import "../styles/ja-study.css";

// Calculate tutoring hours
const START_DATE = new Date("2025-10-20");
const START_HOURS = 67;
const TUTORING_DAYS = [1, 3, 5];

function calculateTutoringHours() {
    const today = new Date();
    today.setHours(0, 0, 0, 0);

    let currentDate = new Date(START_DATE);
    currentDate.setHours(0, 0, 0, 0);

    let additionalHours = 0;

    while (currentDate <= today) {
        const dayOfWeek = currentDate.getDay();
        if (TUTORING_DAYS.includes(dayOfWeek)) {
            additionalHours++;
        }
        currentDate.setDate(currentDate.getDate() + 1);
    }

    return START_HOURS + additionalHours;
}

const totalHours = calculateTutoringHours();
---

<html lang="en">
    <head>
        <BaseHead
            title={"Japanese Progress"}
            description={"My progress of studying japanese"}
        />
        <Header />

        <script
            async
            src="https://www.googletagmanager.com/gtag/js?id=G-QJPVFD5YTY"
        ></script><script is:inline>
            window.dataLayer = window.dataLayer || [];
            function gtag() {
                dataLayer.push(arguments);
            }
            gtag("js", new Date());

            gtag("config", "G-QJPVFD5YTY");
        </script></head
    >

    <!-- Google tag (gtag.js) -->

    <body>
        <main>
            <div class="tutoring-section">
                <h1>Japanese Study Progress</h1>
                <div class="stats-container">
                    <div class="tutoring-card">
                        <div class="tutoring-hours">
                            {totalHours}
                        </div>
                        <div class="tutoring-label">Total Tutoring Hours</div>
                    </div>
                    <div class="tutoring-card">
                        <div class="tutoring-hours" id="anki-count">
                            Loading...
                        </div>
                        <div class="tutoring-label">Flashcards Reviewed</div>
                    </div>
                </div>
            </div>

            <div class="anilist-section">
                <div class="media-category" id="watching-section" style="display: none;">
                    <h2>Currently Watching</h2>
                    <div class="media-grid" id="watching-grid"></div>
                </div>

                <div class="media-category" id="reading-section" style="display: none;">
                    <h2>Currently Reading</h2>
                    <div class="media-grid" id="reading-grid"></div>
                </div>

                <div class="media-category" id="playing-section" style="display: none;">
                    <h2>Currently Playing</h2>
                    <div class="media-grid" id="playing-grid"></div>
                </div>
            </div>

            <KanjiGrid />
        </main>
        <Footer />
        
        <script>
            // Fetch Anki count
            async function fetchAnkiCount() {
                try {
                    const response = await fetch('https://anki-counter.fly.dev/count/japanese');
                    if (response.ok) {
                        const data = await response.json();
                        document.getElementById('anki-count').textContent = (data.count || 0).toLocaleString();
                    }
                } catch (error) {
                    console.error('Failed to fetch Anki count:', error);
                    document.getElementById('anki-count').textContent = '0';
                }
            }

            // Fetch AniList data
            async function fetchAniListMedia(type) {
                const query = `
                    query ($userName: String, $type: MediaType, $status: MediaListStatus) {
                        MediaListCollection(userName: $userName, type: $type, status: $status) {
                            lists {
                                entries {
                                    media {
                                        id
                                        title {
                                            romaji
                                            english
                                        }
                                        coverImage {
                                            large
                                        }
                                        siteUrl
                                    }
                                    progress
                                }
                            }
                        }
                    }
                `;

                try {
                    const response = await fetch('https://graphql.anilist.co', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            query,
                            variables: {
                                userName: 'astrofunk',
                                type: type,
                                status: 'CURRENT'
                            }
                        })
                    });

                    if (response.ok) {
                        const data = await response.json();
                        const entries = data.data?.MediaListCollection?.lists?.[0]?.entries || [];
                        return entries.map(entry => ({
                            id: entry.media.id,
                            title: entry.media.title.english || entry.media.title.romaji,
                            coverImage: entry.media.coverImage.large,
                            siteUrl: entry.media.siteUrl,
                            progress: entry.progress
                        }));
                    }
                } catch (error) {
                    console.error(`Failed to fetch AniList ${type}:`, error);
                }
                return [];
            }

            // Fetch games from CSV
            async function fetchGames() {
                try {
                    const response = await fetch('/data/playing.csv');
                    if (!response.ok) return [];
                    
                    const csvText = await response.text();
                    const lines = csvText.trim().split('\n');
                    
                    const games = lines.slice(1).filter(line => line.trim()).map(line => {
                        const fields = [];
                        let current = '';
                        let inQuotes = false;
                        
                        for (let i = 0; i < line.length; i++) {
                            const char = line[i];
                            if (char === '"') {
                                inQuotes = !inQuotes;
                            } else if (char === ',' && !inQuotes) {
                                fields.push(current);
                                current = '';
                            } else {
                                current += char;
                            }
                        }
                        fields.push(current);
                        
                        const [id, game, url] = fields;
                        return {
                            id,
                            title: game,
                            url: url || '',
                            coverImage: `https://placehold.co/264x352/1a1a2e/ffffff?text=${encodeURIComponent(game || 'Game')}`
                        };
                    });
                    
                    // Fetch cover images from proxy
                    const gameIds = games.map(g => g.id).filter(id => id).join(',');
                    console.log('Game IDs:', gameIds);
                    
                    if (gameIds) {
                        try {
                            const coversResponse = await fetch('/api/igdb-covers', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({ ids: gameIds })
                            });
                            if (coversResponse.ok) {
                                const covers = await coversResponse.json();
                                return games.map(game => ({
                                    ...game,
                                    coverImage: covers[game.id] || game.coverImage
                                }));
                            } else {
                                const error = await coversResponse.text();
                                console.error('Failed to fetch covers:', error);
                            }
                        } catch (error) {
                            console.error('Failed to fetch covers:', error);
                        }
                    }
                    
                    return games;
                } catch (error) {
                    console.error('Failed to fetch games:', error);
                }
                return [];
            }

            // Render media cards
            function renderMedia(items, gridId, sectionId) {
                const grid = document.getElementById(gridId);
                const section = document.getElementById(sectionId);
                
                if (items.length > 0) {
                    section.style.display = 'block';
                    grid.innerHTML = items.map(item => `
                        <a href="${item.siteUrl || item.url}" target="_blank" rel="noopener noreferrer" class="media-card">
                            <img src="${item.coverImage}" alt="${item.title}" loading="lazy" />
                            <div class="media-title">${item.title}</div>
                        </a>
                    `).join('');
                }
            }

            // Load all data
            async function loadData() {
                fetchAnkiCount();
                
                const [watching, reading, playing] = await Promise.all([
                    fetchAniListMedia('ANIME'),
                    fetchAniListMedia('MANGA'),
                    fetchGames()
                ]);
                
                renderMedia(watching, 'watching-grid', 'watching-section');
                renderMedia(reading, 'reading-grid', 'reading-section');
                renderMedia(playing, 'playing-grid', 'playing-section');
            }

            // Run on page load
            loadData();
        </script>
    </body>
</html>
